{# To determine the previous and next pages, we must find the siblings of the current page. #}
{# Pico natively provides previous_page and next_page variables, but those are based on *all* pages at the current level of the page hierarchy--even if they belng to different parent pages. #}
{# The following code will look only at children of *this page's parent*, and determine the previous and next pages based on those. #}

{# Once we have those values, we can produce the HTML that makes "prev" and "next" buttons. #}
{# Often, the buttons would be available at both the top and bottom of the page.  Logically, we should only calculate the previous and next page values *once*, then use them to make any number of buttons. #}
{# In Twig, we would want to call include() once on the initial code segment, then twice or more on the HTML segment. #}
{# The trouble is, when we create a new variable in the include() call, that variable will not exist outside of it. #}
{# Variables already initialized before the include() call *will* persist, but declaring them in every single template file defeats the whole purpose of reusing repetitive code via include(). #}
{# So we simply have to be inefficient, and run this code every time we generate the HTML buttons. #}


	{% set current_parent = NULL %}
	{% set next_page = NULL %}
	{% set previous_page = NULL %}
	
{# Find out what our parent page is #}
	{% set parents_array = pages(current_page.id, offset=-1) %}		{# Returns an array with a single element #}
	{% for parent_obj in parents_array %}							{# ...therefore this will only iterate once #}
		{% set current_parent = parent_obj %}
	{% endfor %}
	
{# Get all child pages of that parent (ie. the siblings of this page), as long as they aren't hidden #}
	{% set siblingid_array = pages(current_parent.id)|filter(p => not p.hidden)|keys %}
	
{# Find the current page within that list, and when we do, save the previous and next pages #}
	{% for siblingid in siblingid_array %}
		{% if siblingid == current_page.id %}
			{% set previous_page = pages[siblingid_array[loop.index0-1]] %}
			{% set next_page = pages[siblingid_array[loop.index0+1]] %}
		{% endif %}
	{% endfor %}


<!-- Article navigation -->
<div class="pagination">
	{# Assuming the sort order is descending date, then the "next" page in the list would the next oldest page. #}
	{# But here we want Prev (on the left) to go to the page written *before* this one, and Next (on the right) to the one written *after*. #}
	{# Therefore, we swap the Prev and Next page values. #}
	
	{% if next_page.id %}<a href="{{ next_page.url }}" class="previous"><span class="abbrev">Prev</span> <span class="title">{{ next_page.title }}</span></a>{% endif %}
	
	<a href="{{ current_parent.url }}" class="up">Index</a>
	
	{% if previous_page.id %}<a href="{{ previous_page.url }}" class="next"><span class="abbrev">Next</span> <span class="title">{{ previous_page.title }}</span></a>{% endif %}
	
</div>
<!-- ------------------ -->