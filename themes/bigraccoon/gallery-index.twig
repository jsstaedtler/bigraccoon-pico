{% extends "_base.twig" %}

{% block page_content %}

	<header class="major">
		{% if meta.title %}<h1>{{ meta.title }}</h1>{% endif %}
		
		<form method="post" action="">
			<input type="submit" name="logout" value="Hide Adult-Only Content" />
		</form>
	</header>
	
	
	{### Collect all tags currently in use in the entire site (PicoTags plugin) #}
	{% set all_site_tags = get_all_tags() %}


	{### Get any selected tags that have been supplied in the "?tag=" URL parameter, then validate that each one actually exists in the site #}
	{% set requested_tags = [] %}														{# Start a new, empty array #}
	{% for tag in url_param('tag', 'string')|replace({'&#39;': '\''})|split(',') %}		{# For some reason, Twig won't unescape a URL-encoded apostrophe, so we use the replace() filter for that #}
		{% if tag|trim in all_site_tags %}
			{% set requested_tags = requested_tags|merge([tag|trim]) %}					{# Add this valid tag to the array #}
		{% endif %}
	{% endfor %}
	
	{### Make a string out of the valid tag(s), to be put back in the URL as a parameter #}
	{% set requested_tags_string = requested_tags|join(',') %}
	
{#
	<p>tag parameter: {{ url_param('tag', 'string')|replace({'&#39;': '\''}) }}</p>
	<p>requested_tags: {{ dump(requested_tags) }}
#}
	
	<h4>Viewing images with tag <h5>{{ dump(requested_tags) }}</h5></h4>


	{### Tag cloud for the user to choose from.  If a tag is currently active, it gets the "active" class, and clicking it will remove it from the active tags. #}
	<h4>Filter by tag</h4>
	<ul class="tags">
	{% for tag in all_site_tags|sort %}
		<li>
		{% if tag in requested_tags %}
			{### We need to remove this tag from the requested_tags array, and put it into the target URL #}
			{% set new_tags_string = requested_tags|filter(v => v != tag)|join(',') %}
			<a href="{{current_page.url}}?tag={{ new_tags_string|url_encode }}" class="active">{{ tag|raw }}</a>
		{% else %}
			{### Simply tack this new tag onto the target URL, after any existing "?tag=" parameter #}
			<a href="{{current_page.url}}?tag={{ ((requested_tags ? requested_tags_string ~ ',') ~ tag)|url_encode }}"{% if tag in requested_tags%} class="active"{% endif %}>{{ tag|raw }}</a>
		{% endif %}
		</li>
	{% endfor %}
	</ul>
	


{#	{% set all_pages = pages(current_page.id)|filter(p => not p.meta.adultonly)|filter(p => not p.hidden)|sort((a, b) => b.date <=> a.date) %} #}

	{### Save the list of all pages subordinate to this index page, except hidden ones, sorting by descending date #}
	{% set all_pages = pages(current_page.id)|filter(p => not p.hidden)|sort((a, b) => b.date <=> a.date) %}
	
	{### Now filter based on any selected tags #}
	{% for tag in requested_tags %}
		{% set all_pages = all_pages|filter(p => tag in p.meta.tags) %}
	{% endfor %}
	

	{### Set a default segment size.  Override that with any value set in the site config.  And override that with any meta value set on this page. #}
	{% set segment_size = 25 %}
	{% if config.segment_size %}{% set segment_size = config.segment_size %}{% endif %}
	{% if meta.segment_size %}{% set segment_size = meta.segment_size %}{% endif %}
	
	{% set total_segments = ((all_pages|length) / segment_size)|round(0, 'ceil') %}
{#	
	<p>all_pages|length = {{ all_pages|length }}</p>
	<p>segment_size = {{ segment_size }}</p>
	<p>total_segments = {{ total_segments }}</p>
#}

	{### Get the value of any "?page=n" parameter in the URL, and if there's no valid number, set it to 1 #}
	{% set current_segment_number = url_param('page', 'int', 1) %}

	{% if current_segment_number < 1 %}
		{% set current_segment_number = 1 %}
	{% endif %}

	{% if current_segment_number > total_segments %}
		{% set current_segment_number = total_segments %}
	{% endif %}
	
{#
	<p>current_segment_number = {{ current_segment_number }}</p>
	<p>current_segment_start = {{ (current_segment_number - 1) * segment_size }}</p>
#}
	{% set current_segment = all_pages|slice((current_segment_number - 1) * segment_size, segment_size) %}
		

	{% if total_segments > 1 %}
		<div class="pagination">
			<a href="{{ current_page.url }}?page={{ current_segment_number - 1 }}" class="previous">Prev</a>
		{% for seg in 1..total_segments %}
			<a href="{{ current_page.url }}?page={{ seg }}" class="page{% if seg == current_segment_number %} active{% endif %}">{{ seg }}</a>
		{% endfor %}
			<a href="{{ current_page.url }}?page={{ current_segment_number + 1 }}" class="next">Next</a>
		</div>
	{% endif %}


		<div id="thumbnails">
	{% for page in current_segment %}
		{% if page.meta.adultonly and username != "eighteen" %}
		
			<a href="/adult-content?dest={{ page.id }}">
				 <img class="placeholder" src="/{{ resize( 'assets/' ~ page.meta.image, null, 30 ) }}" alt="Adult-only content hidden">
			</a>
			
		{% else %}
			
			<a href="{{ page.url }}">
				{# The resize() function comes from the Pico plugin ImageResize #}
				<img src="/{{ resize( 'assets/' ~ page.meta.image, null, 300 ) }}"{% if page.meta.imagedescription %} alt="{{ page.meta.imagedescription }}"{% endif %}>
			</a>
			
		{% endif %}
	{% endfor %}
		</div>
		

	{% if total_segments > 1 %}
		<div class="pagination">
			<a href="{{ current_page.url }}?page={{ current_segment_number - 1 }}" class="previous">Prev</a>
		{% for seg in 1..total_segments %}
			<a href="{{ current_page.url }}?page={{ seg }}" class="page{% if seg == current_segment_number %} active{% endif %}">{{ seg }}</a>
		{% endfor %}
			<a href="{{ current_page.url }}?page={{ current_segment_number + 1 }}" class="next">Next</a>
		</div>
	{% endif %}


{% endblock page_content %}


{% block scripts %}

	{{ parent() }}
	<script src="{{ theme_url }}/js/bigraccoon-gallery.js"></script>
	
{% endblock scripts %}