{# To determine the previous and next pages, we must find the siblings of the current page. #}
{# Pico natively provides previous_page and next_page variables, but those are based on *all* pages at the current level of the page hierarchy--even if they belng to different parent pages. #}
{# The following code will look only at children of *this page's parent*, and determine the previous and next pages based on those. #}

{# Once we have those values, we can produce the HTML that makes "prev" and "next" buttons. #}
{# Often, the buttons would be available at both the top and bottom of the page.  Logically, we should only calculate the previous and next page values *once*, then use them to make any number of buttons. #}
{# In Twig, we would want to call include() once on the initial code segment, then twice or more on the HTML segment. #}
{# The trouble is, when we create a new variable in the include() call, that variable will not exist outside of it. #}
{# Variables already initialized before the include() call *will* persist, but declaring them in every single template file defeats the whole purpose of reusing repetitive code via include(). #}
{# So we simply have to be inefficient, and run this code every time we generate the HTML buttons. #}


{# Find out what our parent page is #}
	{% set parents_array = pages(current_page.id, offset=-1) %}		{# Returns an array with a single element #}
	{% set current_parent = parents_array | first %}				{# ...so just save the first one #}

{# Get all child pages of that parent (ie. the siblings of this page), as long as they aren't hidden #}
{# Nearly the same as the original pagination method, except here we control for whether adult-only content is being hidden #}
	{% set siblingid_array = pages(current_parent.id)|sort((a, b) => b.date <=> a.date)|filter(p => not p.meta.adultonly)|filter(p => not p.hidden)|keys %}

{# Initialize these variables so they exist outside the scope of the following loops #}
	{% set next_page = NULL %}
	{% set previous_page = NULL %}
	
{# Find the current page within that list, and when we do, save the previous and next pages #}
	{% for siblingid in siblingid_array %}
		{% if siblingid == current_page.id %}
			{% set previous_page = pages[siblingid_array[loop.index0-1]] %}
			{% set next_page = pages[siblingid_array[loop.index0+1]] %}
		{% endif %}
	{% endfor %}
	
{# Get the gallery image for the previous and next pages, for use as preview thumbnails as well as for pre-caching #}
	{% set previous_thumb = NULL %}
	{% if previous_page.meta.image %}
		{% set previous_thumb = '/' ~ resize('assets/' ~ previous_page.meta.image, null, 800) %}
	{% endif %}

	{% set next_thumb = NULL %}
	{% if next_page.meta.image %}
		{% set next_thumb = '/' ~ resize('assets/' ~ next_page.meta.image, null, 800) %}
	{% endif %}


<!-- Article navigation -->
<div class="pagination">
	{# Assuming the sort order is descending date, then the "next" page in the list would the next oldest page. #}
	{# But here we want Prev (on the left) to go to the page written *before* this one, and Next (on the right) to the one written *after*. #}
	{# Therefore, we swap the Prev and Next page values. #}
	
	{# We're linking to the "#main" ID/anchor so the viewer doesn't have to scroll every time they switch pages #}
	
	<a href="{{ next_page.url }}#main" class="thumbnail previous{% if not next_page.id %} disabled{% endif %}" style="background-image: url({{ next_thumb }});">
		<svg role="img" viewBox="-128 -128 512 512" fill="black" xmlns="http://www.w3.org/2000/svg"><title>Previous</title><path d="M168.49,199.51a12,12,0,0,1-17,17l-80-80a12,12,0,0,1,0-17l80-80a12,12,0,0,1,17,17L97,128Z"></path></svg>
	</a>
	
	<a href="{{ current_parent.url }}" class="up">Index</a>
	
	<a href="{{ previous_page.url }}#main" class="thumbnail next{% if not previous_page.id %} disabled{% endif %}" style="background-image: url({{ previous_thumb }});">
		<svg role="img" viewBox="-128 -128 512 512" fill="black" xmlns="http://www.w3.org/2000/svg"><title>Next</title><path d="M184.49,136.49l-80,80a12,12,0,0,1-17-17L159,128,87.51,56.49a12,12,0,1,1,17-17l80,80A12,12,0,0,1,184.49,136.49Z"></path></svg>
	</a>
	
</div>
<!-- ------------------ -->